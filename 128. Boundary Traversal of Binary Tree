#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool isLeaf(TreeNode<int>*root)
{
    return (!root->left&&!root->right);
}

void leftBoundry(TreeNode<int>* node,vector<int>&ans)
{
    TreeNode<int>* curr = node->left;
    while(curr)
    {
        if(!isLeaf(curr))
            ans.push_back(curr->data);
        if(curr->left)
            curr = curr->left;
        else
            curr = curr->right;
    }
}
void leafNodes(TreeNode<int>*root,vector<int>&ans)
{
    if(isLeaf(root))
    {
        ans.push_back(root->data);
        return;
    }
    if(root->left)
        leafNodes(root->left,ans);
    if(root->right)
        leafNodes(root->right,ans);
}

void rightBoundry(TreeNode<int>*root,vector<int>&ans)
{
   TreeNode<int>* curr = root->right;
   vector<int>temp;
   while(curr)
   {
       if(!isLeaf(curr))
        temp.push_back(curr->data);
       
       if(curr->right)
        curr  = curr->right;
       else
        curr = curr->left;
   }
   for(int i=temp.size()-1;i>=0;i--)
    ans.push_back(temp[i]);
}
vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int>ans;
    if(!root)
        return ans;
    if(!isLeaf(root))
        ans.push_back(root->data);
    leftBoundry(root,ans);
    leafNodes(root,ans);
    rightBoundry(root,ans);
    return ans;
}

// TC :- O(N)
// SC :- O(N)
