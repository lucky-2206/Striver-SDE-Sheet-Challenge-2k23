bool calc(int node,int par,vector<int>&vis,vector<int>adj[])
{
    vis[node]=1;
    for(auto it:adj[node])
    {
        if(!vis[it])
        {
            if(calc(it,node,vis,adj))
                return true;
        }
        else if(it!=par)
            return true;
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    vector<int>adj[n+1];
    for(auto it:edges)
    {
        adj[it[0]].push_back(it[1]);
        adj[it[1]].push_back(it[0]);
    }
    vector<int>vis(n+1,0);
    for(int i=0;i<=n;i++)
    {
        if(!vis[i])
        {
            if(calc(i,-1,vis,adj))
                return "Yes";
        }
    }
    return "No";
}

// TC :- O(N+2E)+O(N)
// SC :- O(N)
