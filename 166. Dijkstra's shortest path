#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    // Write your code here.
    vector<pair<int,int>>adj[vertices];
    for(auto it:vec)
    {
      adj[it[0]].push_back({it[1], it[2]});
      adj[it[1]].push_back({it[0], it[2]});
    }
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>q;
    vector<int>dist(vertices,INT_MAX);
    q.push({0,source});
    dist[source]=0;
    while(!q.empty())
    {
        auto  it = q.top();
        int node = it.second;
        int dis = it.first;
        q.pop();
        for(auto itr:adj[node])
        {
            if(dist[itr.first]>itr.second+dis)
            {
                dist[itr.first]=itr.second+dis;
                q.push({dist[itr.first],itr.first});
            }
        }
    }
    return dist;
}

// TC :-O(ELogV)
// SC :-O(E+V)
