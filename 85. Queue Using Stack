class Queue {
    // Define the data members(if any) here.
    stack<int>input,output;
    int ne;
    
    public:
    Queue() {
        // Initialize your data structure here.
        ne=0;
    }

    void enQueue(int val) {
        // Implement the enqueue() function.
       input.push(val);
       ne++;
        
    }

    int deQueue() {
        // Implement the dequeue() function.
        if(isEmpty())
            return -1;
        if(output.empty())
        {
           
            while(input.size())

            {
                output.push(input.top());
                input.pop();
            }
        }
        int val = output.top();
        output.pop();
        ne--;
        return val;
    }

    int peek() {
        // Implement the peek() function here.
         if(isEmpty())
            return -1;
        if(output.empty())
        {
            while(!input.empty())
            {
                output.push(input.top());
                input.pop();
            }
        }
        return output.top();
    }

    bool isEmpty() {
        // Implement the isEmpty() function here.
        return ne==0;
    }
};

// TC :- O(1) amortised
// SC :- O(2N)
